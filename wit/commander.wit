package commander:base;

interface types {
    record input-spec {
        name: string,
        description: string,
        data-type: data-type,
    }

    record enum-variant {
        name: string,
        description: string,
    }

    variant primitive  {
        string-type,
        path-type,
        number-type,
        boolean-type,
        timestamp-type,
        enum-type(list<enum-variant>),
    }

    variant data-type {
        primitive(primitive),
        table-type(list<column>),
        union(list<primitive>),
    }

    record column {
        name: string,
        description: string,
        data-type: primitive,
    }

    variant primitive-value {
        string-value(string),
        path-value(list<string>),
        number-value(f64),
        boolean-value(bool),
        timestamp-value(u64),
        enum-value(u16),
    }

    variant value {
        primitive-value(primitive-value),
        compound-value(list<primitive-value>)
    }

    variant value-event {
        set(value),
        add(value),
        clear,
    }

    record schema {
        name: string,
        description: string,
        arguments: list<input-spec>
    }
}

interface outputs {
    use types.{value};

    resource value-output {
        set: func(value: value);
        destroy: func();
    }

    variant list-output-request {
        close,
        load-more(/* limit= */u32),
    }

    resource list-output {
        add: func(event: value);
        pop: func();
        clear: func();
        set-has-more-rows: func(has-more-rows: bool);
        destroy: func();
        poll-request: func() -> list-output-request;
    }

    record tree-node {
        id: string,
        value: value,
        has-children: bool
    }

    variant tree-output-request {
        close,
        load-children(/* parent= */string),
    }

    resource tree-output {
        add: func(parent: option<string>, children: list<tree-node>);
        remove: func(id: string);
        clear: func();
        destroy: func();
        poll-request: func() -> tree-output-request;
    }
}

world plugin {
    import wasi:filesystem/preopens@0.2.0;
    import wasi:filesystem/types@0.2.0;
    import wasi:http/outgoing-handler@0.2.0;

    use types.{value, schema, data-type, column};
    use outputs.{value-output, list-output, tree-output};

    import add-value-output: func(
        name: string,
        description: string,
        data-type: data-type,
        initial-value: option<value>,
    ) -> value-output;

    import add-list-output: func(
        name: string,
        description: string,
        columns: list<column>,
    ) -> list-output;

    import add-tree-output: func(
        name: string,
        description: string,
        data-type: data-type,
    ) -> tree-output;

    export get-schema: func() -> schema;

    export run: func(inputs: list<value>) -> result<string, string>;
}

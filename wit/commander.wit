package commander:base;

interface types {
    record stream-spec {
        name: string,
        description: string,
        data-type: data-type,
    }

    record enum-variant {
        name: string,
        description: string,
    }

    variant primitive  {
        string-type,
        path-type,
        number-type,
        boolean-type,
        timestamp-type,
        enum-type(list<enum-variant>),
    }

    variant data-type {
        primitive(primitive),
        table-type(list<column>),
        type-variable,
    }

    record column {
        name: string,
        description: string,
        data-type: primitive,
    }

    variant primitive-value {
        string-value(string),
        path-value(list<string>),
        number-value(f64),
        boolean-value(bool),
        timestamp-value(u64),
        enum-value(u16),
    }

    variant value {
        primitive-value(primitive-value),
        table-value(list<list<primitive-value>>)
    }

    variant value-event {
        set(value),
        add(value),
        clear,
    }

    record schema {
        name: string,
        description: string,
        arguments: list<stream-spec>
    }
}

interface streams {
    use types.{value-event};

    resource output-handle {
        send: func(event: value-event);
        remove: func();
    }

    resource run-handle {}
}

world plugin {
    import wasi:filesystem/preopens@0.2.0;
    import wasi:filesystem/types@0.2.0;
    import wasi:http/outgoing-handler@0.2.0;

    use types.{stream-spec, value, schema, data-type};
    use streams.{run-handle, output-handle};
    use wasi:filesystem/types@0.2.0.{descriptor};

    import add-output: func(
        name: string,
        description: string,
        data-type: data-type,
        initial-value: option<value>,
    ) -> output-handle;

    export get-schema: func() -> schema;

    export run: func(inputs: list<value>) -> result<string, string>;
}
